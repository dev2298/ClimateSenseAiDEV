CREATE PROCEDURE [dbo].[SyncRollbackMaster]
    @BatchID UNIQUEIDENTIFIER
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRANSACTION;

    BEGIN TRY
        -- SET EXECUTION CONTEXT TO CONVEY THE SAME BATCHID TO ALL THE TRIGGERS .
        DECLARE @a VARBINARY(128);
        SET @a = CAST(@BatchID AS VARBINARY(128));
        SET CONTEXT_INFO @a;

        -- Rollback INSERT operations
        IF EXISTS (SELECT 1 FROM account_master_log WHERE BatchID = @BatchID)
        BEGIN
            DELETE FROM account_master
            WHERE acc_id IN (
                SELECT acc_id FROM account_master_log WHERE BatchID = @BatchID AND action = 'I'
            );
        END

        IF EXISTS (SELECT 1 FROM AccountFundMappingLog WHERE BatchID = @BatchID)
        BEGIN
            DELETE FROM account_fund_mapping 
            WHERE AccountFundMappingID IN (
                SELECT AccountFundMappingID FROM AccountFundMappingLog WHERE BatchID = @BatchID AND action = 'I'
            );
        END

        -- Similar DELETE operations for other tables...

        -- Rollback UPDATE operations
        IF EXISTS (SELECT 1 FROM account_master_log WHERE BatchID = @BatchID)
        BEGIN
            UPDATE am
            SET am.acc_name = aml.acc_name,
                am.acc_desc = aml.acc_desc
                -- Other columns...
            FROM account_master am
            JOIN account_master_log aml ON am.acc_id = aml.acc_id
            WHERE aml.BatchID = @BatchID AND aml.action = 'U';
        END

        -- Similar UPDATE operations for other tables...

        -- Rollback DELETE operations (Reinsert records)
        INSERT INTO account_master (acc_id, acc_name, acc_desc, BatchID)
        SELECT acc_id, acc_name, acc_desc, BatchID 
        FROM account_master_log 
        WHERE BatchID = @BatchID AND action = 'D';

        -- Similar INSERT operations for other tables...

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        -- Rollback in case of error
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        -- Return the error message
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR(@ErrorMessage, 16, 1);
    END CATCH
END;
