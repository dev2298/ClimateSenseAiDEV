using NAV.Common.Logging;
using NAV.RabbitMq.Core;
using NAVBO.BusinessObjects.MDM;
using NavCommonModuleBLL.Common;
using System.Collections.Generic;
using System.Linq;
using System;
using NAVCOMMONMODULES.NAVBO;
using System.Reflection;
using System.Threading.Tasks;
using System.Threading;
using NAVCOMMONMODULES.NavCommonModuleBLL;
using Newtonsoft.Json;

namespace NavCommonModuleBLL.MDM.Main2
{
    public abstract class Entity
    {
        protected ILogger logger = Log4NetService.Instance.GetLogger("Entity");
        protected ConnectionBus rabbitMq;
        protected Receiver requester;
        protected string strEntityMsg = string.Empty;
        readonly protected string queueName;
        bool isReconnectionAllowed = true;
        protected KafkaLogger _klogger;
        protected Guid operationId;
        public static string APPLICATIONNAME = "MdmIntegrationService";
        public string endpoint;
        public Guid primaryOperationId;

        protected Entity(string queue)
        {
            rabbitMq = new ConnectionBus(RabbitMQConfiguration.Username, RabbitMQConfiguration.Password, RabbitMQConfiguration.ServerName, RabbitMQConfiguration.Host);
            System.Configuration.ConnectionStringSettingsCollection ConnectionStringSettingsCollectionObj = AppConfiguration.ConnectionStringSettingsCollection;
            AppConfiguration.ApplicationName = ConnectionStringSettingsCollectionObj[0].Name;
            queueName = queue;
         
            requester = rabbitMq.GetReceiver(queueName);
            requester.GetMessage(Requester_OnMessage, false);
            _klogger = KafkaLogger.Instance;

            Task.Run((Func<Task>)(() =>
            {
                while (true)
                {
                    try
                    {
                        if (isReconnectionAllowed)
                        {
                            Thread.Sleep(10000); //Deliberate connection break and wait so as to allow queue to have 0 consumers

                            if (isReconnectionAllowed) //again check so as to be ensure
                            {

                                logger.Info.Write("RabbitMQ Connection re-initiated for Entities:");

                                rabbitMq.CloseConnection();

                                Thread.Sleep(60000); //Deliberate connection break and wait so as to allow queue to have 0 consumers

                                rabbitMq = new ConnectionBus(RabbitMQConfiguration.Username, RabbitMQConfiguration.Password, RabbitMQConfiguration.ServerName, RabbitMQConfiguration.Host);
                                requester = rabbitMq.GetReceiver(queueName);
                                requester.GetMessage(Requester_OnMessage, false);
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        logger.Critical($"Problem in rabbitMQ re-initiate connection for {this.GetType().Name}: {ex.Message}");
                    }
                    finally
                    {
                        Task.Delay(RabbitMQConfiguration.WaitSecondsForEntitiesReInitiateConnection * 1000).Wait();
                    }
                }
            }));
        }

        public static void Start()
        {
            var subclassTypes = Assembly.GetAssembly(typeof(Entity)).GetTypes().Where(t => t.IsSubclassOf(typeof(Entity)));
            foreach (Type type in subclassTypes)
            {
                // create an instance of that type
                if (type.Name == "AccountAttributesMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "BrokerAccountMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "BrokersMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "BusinessClientRelationshipsMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "EntityMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "ReportingDeliveryAndProcessingGroupsMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "TransactionalClientsMessage")
                {
                    Activator.CreateInstance(type, true);
                }
                else if (type.Name == "FasFundLockDateMessage")
                {
                    Activator.CreateInstance(type, true);
                }
            }

        }

        private void Requester_OnMessage(MessageEventArgs obj)
        {
            isReconnectionAllowed = false;
            List<CheckValidationDetails> checkFailedList = new List<CheckValidationDetails>();
            var startDateTime = DateTime.UtcNow;

            try
            {
                logger.Info.Write("Reading RabbitMQ START: ");

                List<Message> messages = obj.MessageList;

                if (messages != null && messages.Any())
                {
                    var msg = messages.FirstOrDefault();

                    if (msg != null && msg.Body != null)
                    {
                        strEntityMsg = msg.Body;
                        Publish(msg.Body);

                        logger.Info.Write(string.Format("START:Entity.Acknowledge msgBody={0} ", msg.Body));
                        Acknowledge(msg);
                        logger.Info.Write(string.Format("END: Entity.Acknowledge msgBody={0} ", msg.Body));
                    }
                }

                var customDetails = new { queueName = queueName ,messages = messages };
                var serializedcustomDetails = JsonConvert.SerializeObject(customDetails);
                _klogger.LogTraceMessage(0, Guid.NewGuid(), Guid.NewGuid(), 0, new DateTime(1900,1,1), "Entity Publishing", serializedcustomDetails, DateTime.UtcNow, startDateTime, APPLICATIONNAME, Environment.CurrentDirectory, logger);

            }
            catch (Exception ex)
            {
                _klogger.LogErrorMessage(0, ex.ToString(), "Entity Publish FAILED. ", Guid.NewGuid(), Guid.NewGuid(), new DateTime(1900, 1, 1), 1, 0, APPLICATIONNAME, Environment.CurrentDirectory, logger);

                logger.Critical(string.Format("Problem in Entity msgBody={0} ", strEntityMsg), ex);
                checkFailedList.Add(new CheckValidationDetails { ValidationType = "Entity Publish FAILED.", ValidateEntities = ex.Message, ValidationString = strEntityMsg });
                //SendEmail.MailErrorDetails(checkFailedList, AppConfiguration.ErrMailToItOwners, "Entity");
                SendTeamsNotifications.SendInsertionErrorToMDMIntegrationMsTeams(checkFailedList, "Entity");
            }
            finally
            {
                isReconnectionAllowed = true;
                logger.Info.Write(string.Format("END: Reading RabbitMQ msgBody={0} ", strEntityMsg));
            }
        }

        private void Acknowledge(Message msg)
        {
            requester.Acknowledge(msg);
        }

        //protected void RefreshAccountServiceCache(string entities)
        //{
        //    ILogger accountServicelogger = Log4NetService.Instance.GetLogger("AccountCache");
        //    try
        //    {
        //        AccountServiceClient accountService = new AccountServiceClient();
        //        accountServicelogger.Info.Write(String.Format("START:RefreshMDMCache entityIDs={0}", entities));
        //        accountService.RefreshMDMCache(entities);
        //        accountServicelogger.Info.Write(String.Format("END:RefreshMDMCache entityIDs={0}", entities));
        //    }
        //    catch (Exception ex)
        //    {
        //        accountServicelogger.Critical(String.Format("Error:RefreshMDMCache entityIDs={0}", entities), ex);
        //    }
        //}

        public abstract void Publish(string msgBody);
    }
}
