CREATE TRIGGER trg_TrackAccountChanges
ON account_master
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    -- **INSERT Operations**: Log new values (old_value = NULL)
    INSERT INTO account_master_rollback (account_id, attribute_name, action, old_value, new_value)
    SELECT 
        i.account_id, 
        v.column_name, 
        'INSERT', 
        NULL, 
        v.new_value
    FROM inserted i
    CROSS APPLY (VALUES 
        ('column1', CAST(i.column1 AS NVARCHAR(MAX))),
        ('column2', CAST(i.column2 AS NVARCHAR(MAX))),
        ('column3', CAST(i.column3 AS NVARCHAR(MAX)))
    ) AS v(column_name, new_value);

    -- **DELETE Operations**: Log old values (new_value = NULL)
    INSERT INTO account_master_rollback (account_id, attribute_name, action, old_value, new_value)
    SELECT 
        d.account_id, 
        v.column_name, 
        'DELETE', 
        v.old_value, 
        NULL
    FROM deleted d
    CROSS APPLY (VALUES 
        ('column1', CAST(d.column1 AS NVARCHAR(MAX))),
        ('column2', CAST(d.column2 AS NVARCHAR(MAX))),
        ('column3', CAST(d.column3 AS NVARCHAR(MAX)))
    ) AS v(column_name, old_value);

    -- **UPDATE Operations**: Log only changed columns
    INSERT INTO account_master_rollback (account_id, attribute_name, action, old_value, new_value)
    SELECT 
        i.account_id, 
        v.column_name, 
        'UPDATE', 
        v.old_value, 
        v.new_value
    FROM inserted i
    JOIN deleted d ON i.account_id = d.account_id
    CROSS APPLY (VALUES 
        ('column1', CAST(d.column1 AS NVARCHAR(MAX)), CAST(i.column1 AS NVARCHAR(MAX))),
        ('column2', CAST(d.column2 AS NVARCHAR(MAX)), CAST(i.column2 AS NVARCHAR(MAX))),
        ('column3', CAST(d.column3 AS NVARCHAR(MAX)), CAST(i.column3 AS NVARCHAR(MAX)))
    ) AS v(column_name, old_value, new_value)
    WHERE v.old_value <> v.new_value 
          OR (v.old_value IS NOT NULL AND v.new_value IS NULL) 
          OR (v.old_value IS NULL AND v.new_value IS NOT NULL);
END;
